# 7.1. Метод покрокової деталізації
Використання базових алгоритмічних конструкцій:
● слідування;
● розгалуження;
● цикли.
Проєктування алгоритмів методом покрокової деталізації.
Метод покрокової деталізації дозволяє звести складну задачу до сукупності простих задач.
# 7.2. Допоміжні алгоритми
- Допоміжні алгоритми використовують:
● коли потрібно поділити програму на частини;
● коли є частини програми, які повторюються кілька разів.
Допоміжний алгоритм - це спеціально оформлений алгоритм, який можна
використовувати багато разів в інших алгоритмах.

- Етапи роботи з допоміжними
алгоритмами
Опис допоміжного алгоритму – формулювання послідовності команд, які буде
виконувати комп’ютер в допоміжному алгоритмі
Виклик допоміжного алгоритму з інших алгоритмів.

Формальні параметри використовуються в описі допоміжного алгоритму.
Фактичні параметри передаються з головного в допоміжний алгоритм при його виклику і над значеннями
яких виконуються операції, вказані в допоміжному алгоритмі.

Допоміжні алгоритми використовують:
● коли потрібно поділити програму на частини;
● коли є частини програми, які повторюються кілька разів.
Етапи роботи з допоміжними алгоритмами:
● опис – формулювання послідовності команд, які буде виконувати
комп’ютер в допоміжному алгоритмі,
● виклик допоміжного алгоритму потрібну кількість разів.
При описі допоміжних алгоритмів використовують
формальні параметри, при виклику - фактичні.
# 7.3. Допоміжні алгоритми (програмна реалізація)
- Функція – це блок коду, який виконує певні дії.
- Функція може містити параметри, які дозволяють передати їй деяку вхідну інформацію
(аргументи).
- Функція може повертати певне значення як результат.
Ім’я функції має лаконічно описувати її призначення.

- Загальний вигляд опису функції:
def <заголовок_функції>:
<тіло_функції>
[return <вираз>]
- Заголовок функції:
def <ім'я_функції> (<список_ параметрів_ функції>):
Список параметрів може містити елементи, відокремлені
один від одного комою.
- Локальні змінні – оголошуються всередині функції і доступні лише в ній.
- Глобальні змінні– оголошуються в головній програмі і доступні у всій програмі (global - забезпечує доступ до глобальної змінної в середині функції)
- Тіло функції – це її блок, тобто
команди, записані з нового рядка з
відступом 4 пробіли, або одну
позицію табуляції
 // блок функції
- Завершення виконання:
● return
● return <вираз>
● <остання команда тіла функції>
Підсумки
В Python допоміжні алгоритми реалізують за допомогою функцій
Кожна функція має бути якомога простішою і має виконувати лише одну роль.
Краще багато простих функцій, ніж одна чи кілька складних.
Функції мають мати значущі імена (ім’я функції – це ім’я відповідної ролі) та
очевидний функціонал.