Розробити тести для тестування API Github, створивши для цього написаний вами API клієнт, використовуючи при цьому API документацію GitHub https://docs.github.com/en/rest/users/users?apiVersion=2022-11-28, та модулі pytest і requests

Обовязкова частина:

В склонованому репозитрії, використовуючи результати попереднього модуля, розробити тести, використовуючи модуль pytest та requests, які відповідають наступним вимогам:

1. Мітка api зареєстрована в pytest.ini файлі.

2. В файлі /modules/api/clients/github.py створити клас GitHub.
    1. В описі методу є обов’язковий параметр username
    2. В тілі методу формується адреса, на яку потрібно відправити HTTP запит. Логіка формування адреси - поєднати два рядки:
        - https://api.github.com/users/
        - Значення параметра username
    3. В тілі методу відправляється HTTP запит з методом GET на URL адресу з попереднього кроку
    4. Метод повертає тіло відповіді від сервера у форматі json
        1. В описі методу є обов’язковий параметр name
        2. В тілі методу відправляється HTTP запит з методом GET на URL адресу "https://api.github.com/search/repositories" з параметром рядка запиту q значення якого дорівнює значенню параметра методу name
        3. Метод повертає тіло відповіді від сервера у форматі json
            - Клас має метод об’єкту get_user:
            - Клас має метод об’єкту search_repo:

3. В файлі conftest.py описати фікстуру github_api Ця фікстура:
- Створює об’єкт класа GitHub
- Повертає створений об’єкт в тести

4. В файлі /tests/api/test_github_api.py створити тест test_user_exists:
- Тест має мітку api
- Використовує фікстуру github_api
- В тілі тесту використати метод get_user фікстури github_api
- Використати ім’я користувача для пошуку defunkt
- Перевірити, що тіло відповіді від сервера має атрибут login, значення якого має дорівнювати  defunkt

5. В файлі /tests/api/test_github_api.py створити тест test_user_not_exists:
- Тест має мітку api
- Використовує фікстуру github_api
- В тілі тесту використати метод get_user фікстури github_api
- Використати ім’я користувача для пошуку butenkosergii
- Перевірити, що тіло відповіді від сервера має атрибут message значення якого має дорівнювати  Not Found

6. В файлі /tests/api/test_github_api.py створити тест test_repo_can_be_found:
- Тест має мітку api
- Використовує фікстуру github_api
- В тілі тесту використати метод search_repo фікстури github_api
- Використати ім’я репозиторія для пошуку become-qa-auto
- Перевірити, що тіло відповіді від сервера має атрибут total_count, значення якого має дорівнювати очікуваному на момент створення тесту значенню, наприклад 25.

7. В файлі /tests/api/test_github_api.py створити тест test_repo_cannot_be_found:
- Тест має мітку api
- Використовує фікстуру github_api
- В тілі тесту використати метод search_repo фікстури github_api
- Використати ім’я репозиторія для пошуку sergiibutenko_repo_non_exist або будь-яке інше ім’я, що не існує на момент створення тесту
- Перевірити, що тіло відповіді від сервера має атрибут total_count, значення якого має дорівнювати 0.

8. В файлі /tests/api/test_github_api.py створити тест test_repo_with_single_char_be_found:
- Тест має мітку api
- Використовує фікстуру github_api
- В тілі тесту використати метод search_repo фікстури github_api
- Використати ім’я репозиторія для пошуку s або будь-яке інше ім’я, що складається з одного символу
- Перевірити, що тіло відповіді від сервера має атрибут total_count, значення якого має не дорівнювати 0.

Всі створені, змінені та видалені файли додати до коміта і відправити на сервер GitHub за допомогою команди git push.

Підказки для індивідуальних завдань:

Вибрати з API документації https://api.github.com/users/ ще 2 методи, наприклад:
Робота з Emoji https://docs.github.com/en/rest/emojis/emojis?apiVersion=2022-11-28
Робота з коммітами https://docs.github.com/en/rest/commits/commits?apiVersion=2022-11-28#list-commits
Реалізувати за прикладом із лекцій додаткові методи в класі GitHub
Реалізувати 3-4 тести, використовуючи ці методи 